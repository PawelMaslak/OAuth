// <auto-generated />
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230225225702_SeedTestUsers")]
    partial class SeedTestUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("App.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PasswordTestString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 20, 177, 150, 13, 74, 33, 76, 163, 180, 94, 55, 149, 71, 141, 138, 108, 131, 1, 140, 125, 76, 229, 140, 14, 101, 108, 152, 50, 40, 209, 187, 187 },
                            PasswordSalt = new byte[] { 135, 174, 196, 68, 234, 27, 64, 98, 253, 1, 58, 195, 199, 77, 0, 30, 155, 108, 48, 175, 46, 9, 120, 175, 3, 174, 46, 78, 192, 154, 242, 124, 67, 130, 138, 176, 105, 201, 191, 67, 13, 139, 56, 74, 211, 231, 255, 251, 223, 144, 169, 53, 195, 156, 33, 200, 170, 63, 249, 35, 182, 154, 118, 145 },
                            PasswordTestString = "AdminPassword",
                            RoleId = 1,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 30, 111, 158, 170, 143, 10, 195, 219, 44, 173, 168, 175, 222, 0, 202, 47, 73, 113, 214, 108, 163, 248, 255, 226, 155, 41, 227, 87, 30, 177, 104, 50 },
                            PasswordSalt = new byte[] { 70, 75, 208, 191, 67, 133, 60, 170, 63, 217, 109, 153, 173, 18, 110, 164, 146, 194, 53, 2, 12, 224, 202, 231, 136, 191, 233, 213, 104, 244, 83, 11, 109, 23, 94, 28, 86, 202, 176, 70, 248, 23, 14, 107, 128, 116, 137, 31, 23, 32, 229, 39, 239, 118, 139, 88, 94, 133, 180, 1, 230, 172, 5, 252 },
                            PasswordTestString = "UserPassword",
                            RoleId = 2,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.HasOne("App.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
